// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô latest project
apiRouter.get('/projects/latest', async (req, res) => {
  try {
    const latestProject = await Project.findOne().sort({ createdAt: -1 });
    if (!latestProject) {
      return res.status(404).json({ error: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ' });
    }
    
    console.log(`‚úÖ Latest project found: ${latestProject.name} (${latestProject.id})`);
    res.json({ 
      id: latestProject.id, 
      name: latestProject.name,
      createdAt: latestProject.createdAt
    });
  } catch (error) {
    console.error('‚ùå Get latest project error:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° DELETE API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
apiRouter.delete('/projects/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è Attempting to delete project: ${id} by user: ${req.user.userId}`);
    
    const deletedProject = await Project.findOneAndDelete({ 
      id: id, 
      userId: req.user.userId 
    });
    
    if (!deletedProject) {
      console.log(`‚ùå Project not found or unauthorized: ${id}`);
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö' });
    }
    
    console.log(`‚úÖ Project deleted successfully: ${deletedProject.name} (${id})`);
    res.json({ 
      success: true,
      message: '‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      deletedProject: {
        id: deletedProject.id,
        name: deletedProject.name
      }
    });
  } catch (error) {
    console.error('‚ùå Delete project error:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå' });
  }
});
